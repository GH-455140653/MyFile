// lrl.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "stdlib.h"

typedef struct LNode
{
	int data;
	struct LNode *next;
}LNode,*LinkList;

void CreateList(LinkList &L,int n)
{
	int i;
	LinkList p;
	L=(LinkList)malloc(sizeof(LNode));
	L->next=NULL;
	for(i=0;i<n;i++)
	{
		p=(LinkList)malloc(sizeof(LNode));
		printf("input a data:");
		scanf("%d",&(p->data));
		p->next=L->next;
		L->next=p;
	}
}

int InitList(LinkList &L)
{
	L=(LinkList)malloc(sizeof(LNode));
	if(!L)exit(-2);
	L->next=NULL;
	return 0;
}

int DestoryList(LinkList &L)
{
	LinkList q;
	while(L)
	{
		q=L->next;
		free(L);
		L=q;
	}
	L=NULL;
	return 1;
}

int ClearList(LinkList L)
{
	LinkList p,k;
	p=L->next;
	while(p)
	{
		q=p->next;
		free(p);
		p=q;
	}
	L->next=NULL;
	return 1;
}

int LinkEmpty(LinkList L)
{
	if(L->next)return 0;
	else return 1;
}

int ListLength(LinkList L)
{
	int i=0;
	LinkList p=L->next;
	while(p)
	{
		i++;
		p=p->next;
	}
	return 1;
}

int GetElem(LinkList L,int i,int &e)
{
	int j=1;
	LinkList p=L->next;
	while(p && j<i)
	{
		p=p->next;
		j++;
	}
	if(!p || j>i) return 0;
	e=p->data;
	return 1;
}

int LocateElem(LinkList L,int e)
{
	int i=0;
	LinkList p=L->next;
	while(p)
	{
		i++;
		if(p->data==e) return i;
		p=p->next;
	}
	return 0;
}

int ListInsert(LinkList L,int i,int e)
{
	int j=0;
	LinkList p=L,s;
	while(p && j<i-1)
	{
		p=p->next;
		j++;
	}
	if(!p || j>i-1) return 0;
	s=(LinkList)malloc(sizeof(struct LNode));
	s->data=e;
	s->next=p->next;
	p->next=s;
	return 1;
}

int ListDelete(LinkList L,int i,int &e)
{
	int j=0;
	LinkList p=L,q;
	while(p->next && j<i-1)
	{
		p=p->next;
		j++
	}
	if(!p->next || j>i-1) return 0;
	q=p->next;
	p->next=q->next;
	e=q->data;
	free(q);
	return 1;
}

int ListTraverse(LinkList L)
{
	LinkList p=L->next;
	while(p)
	{
		printf("%d",p->data);
		p=p->next;
	}
	printf("\n");
	return 1;
}

int main(int argc, char* argv[])
{
	printf("Hello World!\n");
	return 0;
}

